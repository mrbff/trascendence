generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int                 @id @default(autoincrement())
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  username               String              @unique
  email                  String              @unique
  hash                   String
  hashedRt               String?
  img                    String              @default("https://cdn.dribbble.com/users/2092880/screenshots/6426030/pong_1.gif")
  isOnline               Boolean             @default(false)
  isPlaying              Boolean             @default(false)
  nbOfConnections        Int                 @default(0)
  Wins                   Int                 @default(0)
  Losses                 Int                 @default(0)
  is2faEnabled           Boolean             @default(false)
  secret2fa              String?
  qrcode2fa              String?
  Played                 Int                 @default(0)
  matchHistory           Int[]
  blockedBy              BlockedUser[]       @relation("Blocked_Relation")
  blockedUsers           BlockedUser[]       @relation("Blocker_Relation")
  channels               ChannelMembership[]
  friendRequestsReceived Friendship[]        @relation("Friendship_Receiver")
  friendRequestsSent     Friendship[]        @relation("Friendship_Sender")
  gameRequestsReceived   Gameinvite[]        @relation("Game_Receiver")
  gameRequestsSent       Gameinvite[]        @relation("Game_Sender")
  mexSent                Message[]           @relation("Message_Sender")

  @@map("users")
}

model matchHistory {
  id        Int       @id @default(autoincrement())
  User1Id   String
  User2Id   String
  winner    String
  score     String
  mode      MatchMode
  createdAt DateTime  @default(now())
}

model Channel {
  id       String              @id @unique @default(uuid())
  type     ChannelType
  img      String              @default("")
  name     String?             @unique
  password String?
  lastSeen String[]            @default([])
  members  ChannelMembership[]
  messages Message[]
}

model ChannelMembership {
  userId      Int
  channelId   String
  role        UserRole
  status      UserStatus?
  muteEndTime DateTime?
  channel     Channel     @relation(fields: [channelId], references: [id])
  user        User        @relation(fields: [userId], references: [id])

  @@id([userId, channelId])
}

model Message {
  id        Int               @id @default(autoincrement())
  channelId String
  senderId  Int
  time      DateTime          @default(now())
  content   String
  read      Boolean           @default(false)
  channel   Channel           @relation(fields: [channelId], references: [id])
  sender    User              @relation("Message_Sender", fields: [senderId], references: [id])
  isModer   Boolean           @default(false)
  isInvite  MessaInviteStatus @default(FALSE)
}

model Friendship {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     FriendshipStatus
  receiver   User             @relation("Friendship_Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("Friendship_Sender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model Gameinvite {
  id         Int              @id @default(autoincrement())
  senderId   Int
  receiverId Int
  status     GameinviteStatus
  receiver   User             @relation("Game_Receiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User             @relation("Game_Sender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model BlockedUser {
  blockerId Int
  blockedId Int
  blocked   User @relation("Blocked_Relation", fields: [blockedId], references: [id], onDelete: Cascade)
  blocker   User @relation("Blocker_Relation", fields: [blockerId], references: [id], onDelete: Cascade)

  @@id([blockerId, blockedId])
}

enum ChannelType {
  PUBLIC
  PRIVATE
  DIRECT
}

enum UserRole {
  MEMBER
  ADMIN
  OWNER
}

enum UserStatus {
  ACTIVE
  BANNED
  MUTED
  KICKED
  LEAVED
}

enum MatchMode {
  CLASSIC
  CYBERPUNK
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
}

enum GameinviteStatus {
  PENDING
  ACCEPTED
  OUTDATED
}

enum MessaInviteStatus {
  FALSE
  PENDING
  ACCEPTED
  OUTDATED
}

